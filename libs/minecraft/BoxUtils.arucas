import * from Minecraft;
import IllegalArgumentError from util.Errors;

fun assertNonNegative(args...){
    foreach(arg : args){
        if (arg <= 0){
            throw new IllegalArgumentError("Argument was 0 or negative number");
        }
    }
}

fun getMinPos(startPos : Pos, otherPos : Pos) {
    return new Pos(Math.min(startPos.getX(), otherPos.getX()), Math.min(startPos.getY(), otherPos.getY()), Math.min(startPos.getZ(), otherPos.getZ()));
}
fun getMaxPos(startPos : Pos, otherPos : Pos) {
    return new Pos(Math.max(startPos.getX(), otherPos.getX()), Math.max(startPos.getY(), otherPos.getY()), Math.max(startPos.getZ(), otherPos.getZ()));
}
fun getCenterPos(startPos : Pos, otherPos : Pos) {
    return startPos.add(otherPos).multiply(0.5, 0.5, 0.5);
}

class Box {
    // Box object, always has sorted position 1 to position 2
    var pos1: Pos;
    var pos2: Pos;
    var center: Pos;

    Box(x1: Number, y1: Number, z1: Number, x2: Number, y2: Number, z2: Number){
        this.pos1 = new Pos(x1, y1, z1);
        this.pos2 = new Pos(x2, y2, z2);
        this.center = getCenterPos(this.pos1, this.pos2);
        minPos = getMinPos(this.pos1, this.pos2);
        maxPos = getMaxPos(this.pos1, this.pos2);
        this.pos1 = minPos;
        this.pos2 = maxPos;
    }

    Box(vec1: List|Pos, vec2: List|Pos){
        if (Type.of(vec1) != Pos.type){
            this.pos1 = new Pos(vec1);
        }
        else {
            this.pos1 = vec1;
        }
        if (Type.of(vec2) != Pos.type){
            this.pos2 = new Pos(vec2);
        }
        else {
            this.pos2 = vec2;
        }
        minPos = getMinPos(this.pos1, this.pos2);
        maxPos = getMaxPos(this.pos1, this.pos2);
        this.pos1 = minPos;
        this.pos2 = maxPos;
        this.center = getCenterPos(minPos, maxPos);
    }
    fun getPositionsFromWorld(world) {
        return world.getPositions(this.pos1, this.pos2);
    }
    fun getBlocksFromWorld(world) {
        return world.getBlocks(this.pos1, this.pos2);
    }
    fun getComparator(){
        return fun(a, b) {
            return a.center.distanceTo(this.center) - b.center.distanceTo(this.center);};
    }

    fun adjustPos(pos){
        this.pos1 = this.pos1.add(pos);
        this.pos2 = this.pos2.add(pos);
        this.center = getCenterPos(this.pos1, this.pos2);
    }

    fun getSize() {
        res = this.pos2.subtract(this.pos1);
        return (res.getX() + 1) * (res.getY() + 1) * (res.getZ() + 1);
    }

    fun getLengthArr() {
        res = this.pos2.subtract(this.pos1);
        return res.add(1, 1, 1);
    }

    fun divideBlock(blockX : Number, blockY: Number, blockZ: Number) {
        return divideBlock(blockX, blockY, blockZ, false);
    }
    //returns sorted area.
    fun divideBlock(blockX : Number, blockY: Number, blockZ: Number, sorted : Boolean) {
        assertNonNegative(blockX, blockY, blockZ);
        res = this.pos2.subtract(this.pos1);
        values = [];
        xRange = Math.ceil(res.getX() / blockX);
        yRange = Math.ceil(res.getY() / blockY);
        zRange = Math.ceil(res.getZ() / blockZ);
        foreach (xCount : range(xRange)){
            foreach (yCount : range(yRange)){
                foreach (zCount : range(zRange)){
                    area = new Box(
                        xCount * blockX, 
                        yCount * blockY, 
                        zCount * blockZ, 
                        Math.min((xCount + 1) * blockX - 1, res.getX()),
                        Math.min((yCount + 1) * blockY - 1, res.getY()),
                        Math.min((zCount + 1) * blockZ - 1, res.getZ())
                    );
                    area.adjustPos(this.pos1);
                    values.append(area);
                }
            }
        }
        if (sorted) {
            return values.sort(this.getComparator());
        }
        return values;
    }

    fun divideBy(xCount: Number, yCount: Number, zCount: Number) {
        return this.divideBy(xCount, yCount, zCount, false);
    }

    fun divideBy(xCount: Number, yCount: Number, zCount: Number, sorted: Boolean) {
        res = this.pos2.subtract(this.pos1);
        blockX = Math.ceil(res.getX() / xCount);
        blockY = Math.ceil(res.getY() / yCount);
        blockZ = Math.ceil(res.getZ() / zCount);
        return this.divideBlock(blockX, blockY, blockZ, sorted);
    }

    fun divide8() {
        res = this.pos2.subtract(this.pos1);
        if (res.getX() < 3 || res.getY() < 3 || res.getZ() < 3){
            return [this];
        }

        midpoint = this.pos1.add(this.pos2).multiply(0.5).toBlockPos();
        values = [];

        xIter = [
            [this.pos1.getX(), midpoint.getX()],
            [midpoint.getX() + 1, this.pos2.getX()]
        ];
        yIter = [
            [this.pos1.getY(), midpoint.getY()],
            [midpoint.getY() + 1, this.pos2.getY()]
        ];
        zIter = [
            [this.pos1.getZ(), midpoint.getZ()],
            [midpoint.getZ()+1, this.pos2.getZ()]
        ];

        foreach (x : xIter) {
            foreach (y : yIter) {
                foreach (z : zIter) {
                    values.append(new Box(x[0], y[0], z[0], x[1], y[1], z[1]));
                }
            }
        }
        return values;
    }

    fun getBlockCount() {
        ref = this.pos2.subtract(this.pos1);
        return (ref.getX() + 1) * (ref.getY() + 1) * (ref.getZ() + 1);
    }

    fun toString() {
        return "Box[" + this.pos1 + " : " + this.pos2 + "]";
    }
}


