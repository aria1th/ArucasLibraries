import Stack, LinkedStack from util.Collections;
import Util from util.Auxilary;

/**
 * Builder class for strings, allowing for
 * mutable strings that can be appended to
 */
class StringBuilder {
    /**
     * The actual string value
     */
    var string;

    /**
     * This creates a default StringBuilder
     * with a blank string to start
     */
    StringBuilder() {
        this.string = "";
    }

    /**
     * This creates a StringBuilder
     * with an initialString
     * Parameter - Value (initialValue): the inital value to use as a string
     */
    StringBuilder(initialValue) {
        // Ensure it's a string
        this.string = initialValue.toString();
    }

    /**
     * This allows to to append something 
     * to the front of the string
     * Parameter - Value (value): the value to append
     * Returns - StringBuilder: this StringBuilder
     */
    fun appendPrefix(value) {
        this.string = value.toString() + this.string;
        return this;
    }

    /**
     * This allows to to append something
     * to the end of the string
     * Parameter - Value (value): the value to append
     * Returns - StringBuilder: this StringBuilder
     */
    fun append(value) {
        this.string = this.string + value.toString();
        return this;
    }

    /**
     * Using the + operator does the same as the .append
     * method but allows for more consise syntax
     * Parameter - Value (value): the value to append
     * Returns - StringBuilder: this StringBuilder
     */
    operator + (value) {
        return this.append(value);
    }

    /**
     * This returns the length
     * of the current StringBuilder
     * Returns - Number: the length of the builder
     */
    fun length() {
        return len(this.string);
    }

    /**
     * Gets the immutable string created
     * by the StringBuilder
     * Returns - String: the immutable string
     */
    fun toString() {
        return this.string;
    }
}

class CollectionFormatter {
    var stack: Stack;
    var indent: String;

    CollectionFormatter(indent: String) {
        this.stack = new LinkedStack();
        this.indent = indent;
    }

    fun getIndent() {
        return StringUtil.repeat(this.indent, this.stack.size());
    }

    fun pretty(object: Object): String {
        if (object.instanceOf(Map.type)) {
            return this.prettyMap(object);
        } else if (object.instanceOf(List.type)) {
            return this.prettyCollection(object, "[", "]");
        } else if(object.instanceOf(Set.type)) {
            return this.prettyCollection(object, "<", ">");
        } else if (object.instanceOf(Collection.type)) {
            return this.prettyCollection(object, Type.of(object).getName() + "{", "}");
        } else {
            return object.toString();
        }
    }

    fun prettyCollection(collection: Collection, prefix: String, suffix: String): String {
        if (this.checkInStack(collection)) {
            return prefix + "..." + suffix;
        }

        if (collection.isEmpty()) {
            return prefix + suffix;
        }

        builder = new StringBuilder(prefix + "\n");
        this.stack.push(collection);
        innerIndent = this.getIndent();

        iter = collection.iterator();
        while (iter.hasNext()) {
            builder + innerIndent + this.pretty(iter.next());
            if (iter.hasNext()) {
                builder + ",";
            }
            builder + "\n";
        }
        this.stack.pop();

        builder + this.getIndent() + suffix;
        return builder.toString();
    }

    fun prettyMap(map: Map): String {
        if (this.checkInStack(map)) {
            return "{...}";
        }

        if (map.isEmpty()) {
            return "{}";
        }

        builder = new StringBuilder("{\n");
        this.stack.push(map);
        innerIndent = this.getIndent();

        iter = map.iterator();
        while (iter.hasNext()) {
            key = iter.next();
            value = map[key];
            builder + innerIndent + this.pretty(key) + ": " + this.pretty(value);
            if (iter.hasNext()) {
                builder + ",";
            }
            builder + "\n";
        }
        this.stack.pop();

        builder + this.getIndent() + "}";
        return builder.toString();
    }

    fun checkInStack(collection: Collection): Boolean {
        foreach (element : this.stack) {
            if (Util.referenceEquality(element, collection)) {
                return true;
            }
        }
        return false;
    }
}

class StringUtil {
    static fun repeat(string: String, count: Number): String {
        builder = new StringBuilder();
        while (count > 0) {
            builder.append(string);
            count--;
        }
        return builder.toString();
    }

    static fun pretty(object: Object): String {
        return StringUtil.pretty(object, "    ");
    }

    static fun pretty(object: Object, indentation: String): String {
        return new CollectionFormatter(indentation).pretty(object);
    }
}
